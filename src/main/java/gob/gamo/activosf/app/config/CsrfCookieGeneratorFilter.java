package gob.gamo.activosf.app.config;

import java.io.IOException;
import java.util.UUID;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import org.springframework.security.web.csrf.CsrfToken;
import org.springframework.web.filter.OncePerRequestFilter;

import lombok.extern.slf4j.Slf4j;

/**
 * Filter used to put the CSRF token generated by Spring Security in a cookie
 * for use by AngularJS.
 */
@Slf4j
public class CsrfCookieGeneratorFilter extends OncePerRequestFilter {

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        log.info("En CsrfCsrfCsrfCsrfCsrfCsrf Filter");
        // Spring put the CSRF token in session attribute "_csrf"
        CsrfToken csrfToken = (CsrfToken) request.getAttribute("_csrf");
        log.info("En CsrfCsrfCsrfCsrfCsrfCsrf csrfToken {}", csrfToken == null);
        // Send the cookie only if the token has changed
        String actualToken = request.getHeader("X-CSRF-TOKEN");
        if (actualToken == null || !actualToken.equals(csrfToken.getToken())) {
            // Session cookie that will be used by AngularJS
            String pCookieName = "CSRF-TOKEN";
            String tokencsrf = "";
            if (csrfToken != null) tokencsrf = csrfToken.getToken();
            else tokencsrf = UUID.randomUUID().toString();
            log.info("TOOOOOOOOOOOOOOOKEN {}", tokencsrf);
            Cookie cookie = new Cookie(pCookieName, tokencsrf);
            cookie.setMaxAge(-1);
            cookie.setHttpOnly(true);
            cookie.setPath("/");
            response.addCookie(cookie);
        }
        String sessionid = request.getSession().getId();
        // be careful overwriting: JSESSIONID may have been set with other flags
        response.setHeader("SET-COOKIE", "JSESSIONID=" + sessionid + "; HttpOnly");
        filterChain.doFilter(request, response);
    }
}
