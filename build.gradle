//import org.gradle.kotlin.dsl.graalvmNative

plugins {
    id 'java'
    id 'jacoco'
    id("com.diffplug.spotless") version "6.18.0"
    id("org.springframework.boot") version "3.1.2"
    id("io.spring.dependency-management") version "1.1.0"
    //id("org.graalvm.buildtools.native") version "0.9.20"
    id("org.hibernate.orm") version "6.2.2.Final"
}

ext {
    junitVersion = '5.7.2'
    lombokVersion = '1.18.20'
    //apache-commons-lang3.version = 3.12.0
//    springfox.version = '3.0.0'
}

group = "gob.gamo.activosf"
java.sourceCompatibility = JavaVersion.VERSION_17

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")

    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-resource-server")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.3")    
    implementation("com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0")

    implementation("org.postgresql:postgresql:42.6.0")
//    implementation("org.apache.commons:commons-lang3:3.1")
    implementation("commons-io:commons-io:2.13.0")

    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    testImplementation("org.springframework.boot:spring-boot-starter-test") 
    testAnnotationProcessor('org.projectlombok:lombok')
    testCompileOnly('org.projectlombok:lombok')

    runtimeOnly("com.h2database:h2")
}

tasks.named('test') {
	useJUnitPlatform()
}
/*
tasks.withType<Test> {
    useJUnitPlatform()
    finalizedBy("jacocoTestReport")
}
*/
tasks.jacocoTestReport {
    dependsOn(tasks.test)

    reports {
        html.required.set(true)
        html.outputLocation.set(file("$buildDir/jacoco/html"))
    }
}

tasks.compileJava {
    dependsOn(tasks.clean)
}

spotless {
    java {
        target("src/main/java/**/*.java")
        palantirJavaFormat()
        indentWithSpaces()
        formatAnnotations()
        removeUnusedImports()
        trimTrailingWhitespace()
        importOrder("gob.gamo.alma", "java", "javax", "jakarta", "org", "com", "lombok")
    }

    kotlinGradle {
        ktlint()
        indentWithSpaces()
        trimTrailingWhitespace()
    }
}

hibernate {
    enhancement {
        enableDirtyTracking.set(true)
        enableLazyInitialization.set(true)
        enableExtendedEnhancement.set(false)
    }
}
/*
graalvmNative {
    binaries {
        names.forEach { binaryName ->
            named(binaryName) {
                classpath("./aot/")
            }
        }
    }
}
*/
